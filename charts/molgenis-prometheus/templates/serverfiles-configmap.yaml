apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-serverfiles-configmap
data:
  alerts: |
    groups:
      {{ if eq .Values.environment "production" -}}
      - name: SiteMonitoring
        rules:
          - alert: UnreachableURL
            expr: probe_success{job="blackbox-targets", type="production"} == 0
            for: 6m
            labels:
              severity: CRITICAL
              frequency: 15m
            annotations:
              summary: {{ printf "\"Site unreachable\"" }}
              description: {{ printf "\"  Website: {{$labels.instance}} \\n  ID: {{ $labels.id }} \\n  project: {{$labels.project}} \\n  Type: {{$labels.type}} \\n \"" }}
      - name: virtualmachines
        rules:
          - alert: InstanceProdDownOldInfra
            expr: up{job="node-targets", type="production"} == 0
            for: 5m
            labels:
              severity: CRITICAL
              frequency: 15m
            annotations:
              summary: {{ printf "\"Node_exporter production instance UNREACHABLE on old infra\"" }}
              description: {{ printf "\"  Instance: {{$labels.instance}} \\n  ID: {{ $labels.id }} \\n  project: {{ $labels.project }} \\n type: {{$labels.type}} \\n \"" }}
          - alert: InstanceProdDownNewInfra
            expr: up{job="openstack23"} == 0
            for: 5m
            labels:
              severity: CRITICAL
              frequency: 15m
            annotations:
              summary: {{ printf "\"Node_exporter of instance UNREACHABLE on new infra\"" }}
              description: {{ printf "\"  Instance: {{$labels.instance}} \\n    ID: {{$labels.id}} \\n    Project: {{$labels.project}} \\n    IP address: {{$labels.ip}} \\n \"" }}
          - alert: ServerlistInstanceDown
            expr: up{job="serverListServer"} == 0
            for: 5m
            labels:
              severity: CRITICAL
              frequency: 15m
            annotations:
              summary: {{ printf "\"Serverlist server Down\"" }}
              description: {{ printf "\"  Serverlist: {{ $labels.id }}/{{ $labels.instance }} is down!\\n    ID: {{ $labels.id }} \\n    Project: {{ $labels.project }}\\n    DTAP: {{ $labels.type }}\\n \"" }}
          - alert: OutOfDiskSpace
            expr: (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"} * 100) < 10
            for: 5m
            labels:
              severity: WARN
              frequency: daily
            annotations:
              summary: {{ printf "\"Out of disk space (instance {{ $labels.instance }}) \"" }}
              description: {{ printf "\"  Disk is almost full (< 10 percent left)\\n    VALUE = {{ $value }}\\n    Project: {{ $labels.id }}/{{ $labels.project }}\\n    Type: {{ $labels.type }}\\n \\n \"" }}
          {{ end }}
      {{ if eq .Values.environment "development" }}
      - name: nodes
        rules:
          - alert: NodeIsDown
            expr: up{job="kubernetes-nodes"} == 0
            labels:
              severity: ERROR
            annotations:
              summary: {{ printf "\"Node DOWN on rancher cluster\"" }}
              description: {{ printf "\"  Node {{$labels.instance}} is down\\n \"" }}
      - name: pods
        rules:
          - alert: PodIsDown
            expr: up == 0
            labels:
              severity: WARN
            annotations:
              summary: {{ printf "\"Pod down on rancher cluster\"" }}
              description: {{ printf "\"  Pod is down\\n    Instance: {{$labels.instance}} \\n    Namespace: {{ $labels.kubernetes_namespace }} \\n \"" }}
      {{ end }}
  rules: | 
    {}
  prometheus.yml: |
    rule_files:
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
      {{ if eq .Values.environment "production" -}}
      - job_name: 'prometheus-rancher-prod'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'node-targets'
        file_sd_configs:
          - files:
            - /etc/configProm/node-targets.yml
        honor_labels: true
      - job_name: 'blackbox-targets'
        scrape_interval: 5m
        metrics_path: /probe
        honor_labels: true
        params:
          module: [http_2xx]
        file_sd_configs:
          - files:
            - '/etc/configProm/blackbox-targets.yml'
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: molgenis-prometheus-prometheus-blackbox-exporter:9115
      - job_name: prometheus-openstack
        honor_labels: true
        metrics_path: /federate
        params:
          'match[]':
            - '{__name__=~"job:.*"}'   # Request all job-level time series
            - '{job="prometheus"}'
            - '{job="openstack23"}'
            - '{job="haproxy"}'
            - '{job="tower"}'
        static_configs:
          - targets:
              - 195.169.22.41:9090
      {{ end -}}
      {{ if eq .Values.environment "development" -}}
      - job_name: elasticsearch
        static_configs:
          # - targets: ['<host>:9114']
      - job_name: molgenis
        metrics_path: /api/metrics/prometheus
        static_configs:
          # - targets: ['<host>']
      - job_name: node
        static_configs:
          # - targets: ['<host>:9100']
      - job_name: postgres
        static_configs:
          # - targets: ['<host>:9187']
      - job_name: jenkins
        metrics_path: '/prometheus/'
        scheme: https
        static_configs:
          - targets: ['jenkins.dev.molgenis.org:443']
      - job_name: prometheus-rancher-dev
        static_configs:
          - targets:
              - localhost:9090
      # A scrape configuration for running Prometheus on a Kubernetes cluster.
      # This uses separate scrape configs for cluster components (i.e. API server, node)
      # and services to allow each to use different authentication configs.
      #
      # Kubernetes labels will be added as Prometheus labels on metrics via the
      # `labelmap` relabeling action.
      # Scrape config for API servers.
      #
      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      # service so this uses `endpoints` role and uses relabelling to only keep
      # the endpoints associated with the default/kubernetes service using the
      # default named port `https`. This works for single API server deployments as
      # well as HA API server deployments.
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https
        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        # Keep only the default/kubernetes service endpoints for the https port. This
        # will add targets for each API server which Kubernetes adds an endpoint to
        # the default/kubernetes service.
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https
        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      - job_name: 'kubernetes-nodes-cadvisor'
        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https
        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        # This configuration will work only on kubelet 1.7.3+
        # As the scrape endpoints for cAdvisor have changed
        # if you are using older version you need to change the replacement to
        # replacement: /api/v1/nodes/${1}:4194/proxy/metrics
        # more info here https://github.com/coreos/prometheus-operator/issues/633
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          # Only for Kubernetes ^1.7.3.
          # See: https://github.com/prometheus/prometheus/issues/2916
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        metric_relabel_configs:
          - action: replace
            source_labels: [id]
            regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
            target_label: rkt_container_name
            replacement: '${2}-${1}'
          - action: replace
            source_labels: [id]
            regex: '^/system\.slice/(.+)\.service$'
            target_label: systemd_service_name
            replacement: '${1}'
      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: instance
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
      - job_name: 'prometheus-pushgateway'
        honor_labels: true
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway
      # Example scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      # - job_name: 'kubernetes-services'
      #   metrics_path: /probe
      #   params:
      #     module: [http_2xx]
      #   kubernetes_sd_configs:
      #     - role: service
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
      #       action: keep
      #       regex: true
      #     - source_labels: [__address__]
      #       target_label: __param_target
      #     - target_label: __address__
      #       replacement: blackbox
      #     - source_labels: [__param_target]
      #       target_label: instance
      #     - action: labelmap
      #       regex: __meta_kubernetes_service_label_(.+)
      #     - source_labels: [__meta_kubernetes_namespace]
      #       target_label: kubernetes_namespace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       target_label: kubernetes_name
      - job_name: kubernetes-services
        kubernetes_sd_configs:
          - role: service
        metrics_path: /metrics
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
            - __meta_kubernetes_service_label_molgenis_org_environment
            action: replace
            target_label: environment
            regex: (.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__address__]
            action: replace
            target_label: __param_target
          - source_labels: [__param_target]
            action: replace
            target_label: instance
      # Example scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      {{ end }}
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: molgenis-prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
