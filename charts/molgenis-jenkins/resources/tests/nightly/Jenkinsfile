pipeline {
    agent {
        kubernetes {
            inheritFrom 'shared'
            // maven jdk17 pod template defined in molgenis/molgenis-jenkins-pipeline library
            yaml libraryResource("pod-templates/maven-jdk17.yaml")
        }
    }
    environment {
        LOCAL_REPOSITORY = "${LOCAL_REGISTRY}/molgenis/molgenis-app"
        CHART_VERSION = '1.15.8'
        BRANCH_NAME = 'master'
        TIMESTAMP = sh(returnStdout: true, script: "date -u +'%F_%H-%M-%S'").trim()
    }
    stages {
        stage('Prepare [ nightly ]') {
            steps {
                container('vault') {
                    script {
                        sh "mkdir ${JENKINS_AGENT_WORKDIR}/.m2"
                        sh "mkdir ${JENKINS_AGENT_WORKDIR}/.rancher"
                        sh(script: "vault read -field=value secret/ops/jenkins/rancher/cli2.json > ${JENKINS_AGENT_WORKDIR}/.rancher/cli2.json")
                        sh(script: "vault read -field=value secret/ops/jenkins/maven/settings.xml > ${JENKINS_AGENT_WORKDIR}/.m2/settings.xml")
                        env.SONAR_TOKEN = sh(script: "vault read -field=value secret/ops/token/sonar", returnStdout: true)
                        env.GITHUB_TOKEN = sh(script: "vault read -field=value secret/ops/token/github", returnStdout: true)
                        env.TAG = "nightly-${TIMESTAMP}"
                    }
                }
                checkout scm: [$class: 'GitSCM', branches: [[name: "*/${env.BRANCH_NAME}"]], userRemoteConfigs: [[credentialsId: 'molgenis-jenkins-github-secret', url: 'https://github.com/molgenis/molgenis']]]
            }
        }
        stage('Build [ nightly ]') {
            steps {
                container('maven') {
                    sh "mvn -q -B clean install -Dmaven.test.redirectTestOutputToFile=true -DskipITs -T4"
                }
            }
        }
        stage('Test [ nightly ]') {
            steps {
                container('maven') {
                    sh "mvn -q -B site"
                }
            }
        }
        stage('Package [ nightly ]') {
            steps {
                container('maven') {
                    dir('molgenis-app') {
                        sh "mvn -q -B jib:build -Djib.tag=${TAG} -Djib.repository=${LOCAL_REPOSITORY}"
                    }
                }
            }
        }
        stage('Deploy [ nightly.molgenis.org ]') {
            steps {
                container('rancher') {
                    sh "rancher context switch prod-molgenis"
                    sh "rancher apps upgrade --set image.tag=${TAG} nightly ${CHART_VERSION}"
                }
            }
        }
    }
    post {
        unstable {
            molgenisSlack message: ':warning: Build unstable', channel: '#general', color: 'warning'
        }
        failure {
            molgenisSlack message: ':x: Build failed', channel: '#general', color: 'danger'
        }
    }
}
