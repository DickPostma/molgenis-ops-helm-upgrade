# hubot configures the hubot subchart
hubot:
  redis:
    enabled: false
  config:
    HUBOT_NAME: mark
    # URL for the jenkins server
    HUBOT_JENKINS_URL: 'https://jenkins.dev.molgenis.org'
    # URL for the registry server
    HUBOT_REGISTRY_URL: 'https://registry.molgenis.org'
  secretConfig:
    # Authorization token for the jenkins preview job
    JENKINS_PREVIEW_JOB_AUTH: 'xxxx'
    # See https://slackapi.github.io/hubot-slack/#getting-a-slack-token
    HUBOT_SLACK_TOKEN: 'xxxx'

  # scripts are copied from https://github.com/jenkinsci/hubot-steps-plugin/tree/master/scripts, feel free to add or update!
  scripts:
    cleanup.coffee: |-
      # Description:
      #   Verwijder previews van Rancher
      #
      # Dependencies:
      #   None
      #
      # Configuration:
      #   HUBOT_JENKINS_URL
      #   HUBOT_JENKINS_AUTH
      #   HUBOT_REGISTRY_URL
      #
      #   Auth should be in the "user:password" format.
      #   password can be a token (which can be obtained from the jenkins user configuration)
      #
      # Commands:
      #   hubot clean  <bbmri | frontend | empty> <pr-nummer> - ruimt preview op voor bbmri / frontend / molgenis
      #
      # Author:
      #   Jelmer Veen, based on preview.coffee of fldk
      querystring = require "querystring"

      callback = (onSuccess, ifNotFound) -> (err, res, body) ->
        if err
          console.log("Something went wrong:\n```#{err}```")
        else if 200 <= res.statusCode < 400
          onSuccess(body)
        else if 404 == res.statusCode
          ifNotFound()
        else
          console.log("Something went wrong\n```#{res.statusCode} #{body}```")

      createRequest = (msg, url) ->
        req = msg.http(url)
        if url.startsWith(process.env.HUBOT_JENKINS_URL) && process.env.HUBOT_JENKINS_AUTH
          auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString("base64")
        req.header("Content-Length", 0)
        return req

      runPreviewJob = (msg, action, tag, onSuccess) ->
        url = "#{process.env.HUBOT_JENKINS_URL}/buildByToken/buildWithParameters?job=preview&ACTION=#{action}&TAG=#{querystring.escape(tag)}&token=#{process.env.JENKINS_PREVIEW_JOB_AUTH}"
        req = createRequest msg, url
        req.post() callback(onSuccess, -> msg.reply "Ik verwacht een parameterized preview job in Jenkins, misschien kan een echt mens die even configureren.")

      #"rancher apps delete preview-${TAG.toLowerCase()}"
      cleanup = (msg) ->
        # match is an array, 0 is full command, 0 is what (.+) captured
        command = msg.match[1]
        parameters = command.split(' ')
        prefix = 'unknown'
        prNumber = ''

        if parameters.length == 1
          prefix = ''
          prNumber = parameters[0]
        else
          prNumber = parameters[1]

        if parameters[0] == 'bbmri'
          prefix = 'bbmri-pr-'
        else if parameters[0] == 'frontend'
          prefix = 'frontend-pr-'
        else if prefix == 'unknown'
          msg.reply ":owl: Sorry, ik ken die repository (nog) niet helaas."

        if prefix != 'unknown' and prNumber.match(/^[\d]*$/gi) != null
          tag = "#{prefix}#{prNumber}"
          runPreviewJob msg, "delete", tag, () ->
            cleanNamespaces = if Math.random() < 0.2 then "\nVergeet je niet ook de namespace nog zelf even te verwijderen?" else ""
            msg.reply ":lizard: Preview weggooien? Ga ik regelen voor je! #{tag} wordt opgeruimd! :broom:#{cleanNamespaces}"
      module.exports = (robot) ->
        robot.respond /clean (.+)/i, (msg) -> cleanup(msg)

    notify.coffee: |-
      # Description:
      #   Interact with hubot itself.
      #
      # Dependencies:
      #   None
      #
      # Configuration:
      #   None

      # Commands:
      #   None

      # URLS:
      #   POST /hubot/notify/<room> (message=<message>)
      #
      # Author:
      #   Fabric8, nrayapati

      module.exports = (robot) ->

        robot.router.post '/hubot/notify/:room', (req, res) ->
          room = req.params.room

          # Actual message.
          message = req.body.message
          # Status STARTED/ABORTED/SUCCESS/FAILURE/NOT_BUILT/BACK_TO_NORMAL/UNSTABLE for build notifications
          # And for pipeline steps what ever user sends, by default to SUCCESS.
          status = req.body.status
          # extraData is empty for build notifications, but what ever user sends for pipelines.
          extraData = req.body.extraData
          # User Id, null for anonymous.
          userId = req.body.userId
          # User Name
          userName = req.body.userName
          # Defaults to User Name for the builds kicked off by users for others actual build cause. Example TimerTrigger, SCMChange and so on.
          buildCause = req.body.buildCause
          # BUILD - For Build notifications.
          # SEND - hubotSend
          # APPROVE - hubotApprove
          # TEST - For hubot site test notifications.
          stepName = req.body.stepName

          # Except test notifications, this list of envrionment variable available for the current build.
          envVars = req.body.envVars

          # Current time in milliseconds.
          ts = req.body.ts / 1000

          # hubotApprove step vars
          # input id
          id = req.body.id
          # submitter
          submitter = req.body.submitter
          submitterParameter = req.body.submitterParameter
          ok = req.body.ok
          # TODO Yet to add this server side.
          # parameters = req.body.parameters


          # Validate Site for both folder level and global site level.
          if stepName == 'TEST'
            if extraData.FOLDER_NAME
              attachments = [ { "color": "#1093E8", "text": message, "title": "Jenkins » " + extraData.FOLDER_NAME[0].toUpperCase() + extraData.FOLDER_NAME[1..-1], "title_link": extraData.FOLDER_URL, "footer": userName, "footer_icon": "https://png.icons8.com/color/1600/jenkins.png", "ts": ts }]
            else
              attachments = [ { "color": "#1093E8", "text": message, "title": "Jenkins » Global", "title_link": extraData.JENKINS_URL, "footer": userName, "footer_icon": "https://png.icons8.com/color/1600/jenkins.png", "ts": ts }]
          # else for all other cases like BUILD/SEND/APPROVE
          else
            if status == 'FAILURE'
              color = 'danger'
            else if status == 'ABORTED'
              color = 'warning'
            else if status == 'STARTED'
              color = '#1093E8'
            else
              color = 'good'
            jobName = (envVars.JOB_NAME.split('/').map (word) -> word[0].toUpperCase() + word[1..-1]).join ' » '
            title = "Jenkins » " + jobName + " " + envVars.BUILD_DISPLAY_NAME

            if stepName == 'APPROVE'
              jobUrl = envVars.BUILD_URL.replace(envVars.JENKINS_URL, '')
              attachments = [ { "color": color, "text": message + "\n     *to Proceed reply:* `.j proceed " + jobUrl + "`" + "\n     *to Abort reply:* `.j abort " + jobUrl + "`", "title": title, "title_link": envVars.RUN_DISPLAY_URL, "footer": buildCause, "footer_icon": "https://png.icons8.com/color/1600/jenkins.png", "ts": ts, "mrkdwn_in": ["text", "pretext"] }]
            else
              attachments = [ { "color": color, "text": message, "title": title, "title_link": envVars.RUN_DISPLAY_URL, "footer": buildCause, "footer_icon": "https://png.icons8.com/color/1600/jenkins.png", "ts": ts, "mrkdwn_in": ["text", "pretext"] }]

          robot.adapter.client.web.chat.postMessage(room, "", {as_user: true, unfurl_links: true, attachments: attachments })
          res.end()

    preview.coffee: |-
      # Description:
      #   Rol preview instanties uit op het dev cluster.
      #
      # Dependencies:
      #   None
      #
      # Configuration:
      #   HUBOT_JENKINS_URL
      #   HUBOT_JENKINS_AUTH
      #   HUBOT_REGISTRY_URL
      #
      #   Auth should be in the "user:password" format.
      #   password can be a token (which can be obtainined from the jenkins user configuration)
      #
      # Commands:
      #   hubot preview list - Welke preview omgevingen staan er allemaal gedeployed
      #   hubot preview delete <tag> - Verwijder de preview environment voor deze tag
      #   hubot preview <tag> - Deploy een molgenis preview environment voor deze tag
      #   hubot preview pr <pr_number> - Deploy een molgenis preview environment voor de laatste tag van een pull request
      #
      # Author:
      #   fdlk

      querystring = require "querystring"

      callback = (onSuccess, ifNotFound) -> (err, res, body) ->
        if err
          console.log("Something went wrong:\n```#{err}```")
        else if 200 <= res.statusCode < 400
          onSuccess(body)
        else if 404 == res.statusCode
          ifNotFound()
        else
          console.log("Something went wrong\n```#{res.statusCode} #{body}```")

      createRequest = (msg, url) ->
        req = msg.http(url)
        if url.startsWith(process.env.HUBOT_JENKINS_URL) && process.env.HUBOT_JENKINS_AUTH
          auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString("base64")
        req.header("Content-Length", 0)
        return req

      runPreviewJob = (msg, action, tag, onSuccess) ->
        url = "#{process.env.HUBOT_JENKINS_URL}/buildByToken/buildWithParameters?job=preview&ACTION=#{action}&TAG=#{querystring.escape(tag)}&token=#{process.env.JENKINS_PREVIEW_JOB_AUTH}"
        req = createRequest msg, url
        req.post() callback(onSuccess, -> msg.reply "Ik verwacht een parameterized preview job in Jenkins, misschien kan een echt mens die even configureren.")

      searchRegistry = (msg, params, ifFound, ifNotFound) ->
        req = createRequest msg, "#{process.env.HUBOT_REGISTRY_URL}/service/rest/v1/search?repository=docker&name=molgenis%2Fmolgenis-app&#{params}"
        req.get() callback((body) ->
          items = JSON.parse(body).items
          if items && items.length
            ifFound(items)
          else
            ifNotFound()
        , ->
          ifNotFound())

      listPreview = (msg) -> runPreviewJob msg, "list", null, -> msg.reply "Ik ga even voor je kijken ..."

      deletePreview = (msg) ->
        tag = msg.match[1].replace(/`/g, '')
        runPreviewJob msg, "delete", tag, () ->
          cleanDeskPolicy = if Math.random() < 0.1 then "\nHet is belangrijk je bureau een beetje schoon te houden :innocent:" else ""
          msg.reply "Ik ga `#{tag}` voor je opruimen...#{cleanDeskPolicy}"

      installPreview = (msg) ->
        tag = msg.match[1].replace(/`/g, '')
        searchRegistry msg, "version=#{querystring.escape(tag)}"
        , ->
          runPreviewJob msg, "install", tag, -> msg.reply "Ik ga `#{tag}` voor je klaarzetten..."
        , ->
          searchRegistry msg, "q=#{tag}"
          , (items) ->
            versions = items.map (item) -> item.version
            msg.reply "Tag `#{tag}` kan ik niet vinden, maar wel: `#{versions.join("`,`")}`"
          , ->
            msg.reply "Tag `#{tag}` kan ik niet vinden, en ook niets wat erop lijkt :thinking_face:"

      installPullRequestPreview = (msg) ->
        pr_number = msg.match[1].replace(/`/g, '')
        tag_base = "PR-" + pr_number
        searchRegistry msg, "q=#{tag_base}"
        , (items) ->
          tags = items.map (item) -> item.version
          latest_pr_tag = null
          highest_pr_tag_version = 0
          for tag in tags
            if tag.startsWith(tag_base + "-")
              pr_tag_version = parseInt(tag.split("-").pop())
              if pr_tag_version > highest_pr_tag_version
                latest_pr_tag = tag
                highest_pr_tag_version = pr_tag_version
          if latest_pr_tag == null
            msg.reply "Ik kon wel tags vinden maar niet iets waar je wat aan hebt :confused: `#{tags.join("`,`")}`"
          else
            runPreviewJob msg, "install", latest_pr_tag, ->
              msg.reply "De laatste tag voor PR `#{pr_number}` is `#{latest_pr_tag}` en die ga ik voor je klaarzetten! :rocket: Ruim je het zelf weer netjes op als je er klaar mee bent?"
        , ->
          msg.reply "Ik kan geen enkele tag vinden voor PR `#{pr_number}` :sob:"

      module.exports = (robot) ->
        robot.respond /preview delete (.+)/i, (msg) -> deletePreview(msg)
        robot.respond /preview list/i, (msg) -> listPreview(msg)
        robot.respond /preview pr (\d+)/i, (msg) -> installPullRequestPreview(msg)
        robot.respond /preview tag (.+)/i, (msg) -> installPreview(msg)

  ingress:
    enabled: false
  nodeSelector:
    deployPod: "true"
